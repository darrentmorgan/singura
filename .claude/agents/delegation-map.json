{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "title": "Agent Delegation Map",
  "description": "Maps file patterns and triggers to appropriate sub-agents for autonomous code review",
  "version": "1.0.0",
  "delegation_rules": [
    {
      "name": "React Components",
      "pattern": "**/*.tsx",
      "exclude": ["**/*.test.tsx", "**/*.spec.tsx"],
      "primary_agent": "frontend-developer",
      "secondary_agents": ["code-reviewer-pro", "test-suite-manager"],
      "triggers": ["Edit", "Write"],
      "context": {
        "framework": "React 18",
        "styling": "Tailwind CSS",
        "ui_library": "shadcn/ui",
        "animation_library": "Magic UI",
        "mcp_server": "@magicuidesign/mcp"
      }
    },
    {
      "name": "OAuth Services & Integrations",
      "pattern": "src/**/*oauth*.ts",
      "exclude": ["**/*.test.ts", "**/*.spec.ts"],
      "primary_agent": "oauth-integration-specialist",
      "secondary_agents": ["backend-architect", "security-auditor", "test-suite-manager"],
      "triggers": ["Edit", "Write"],
      "context": {
        "security": "PKCE, state validation, token encryption",
        "platforms": "Slack, Google, Microsoft",
        "storage": "Singleton pattern, dual storage architecture",
        "testing": "Mock servers, 100% coverage required"
      }
    },
    {
      "name": "OAuth Mock Servers",
      "pattern": "tests/mocks/oauth-servers/**/*.ts",
      "primary_agent": "oauth-integration-specialist",
      "secondary_agents": ["test-suite-manager"],
      "triggers": ["Edit", "Write"],
      "context": {
        "purpose": "OAuth testing without real API calls",
        "requirements": "Token exchange, refresh, revocation endpoints"
      }
    },
    {
      "name": "Backend API Handlers",
      "pattern": "src/server/handlers/**/*.ts",
      "exclude": ["**/*.test.ts"],
      "primary_agent": "backend-architect",
      "secondary_agents": ["typescript-pro", "code-reviewer-pro"],
      "triggers": ["Edit", "Write"],
      "context": {
        "framework": "Express 5",
        "database": "Supabase",
        "validation": "Zod"
      }
    },
    {
      "name": "AI Agents",
      "pattern": "src/server/agents/**/*.ts",
      "exclude": ["**/*.test.ts"],
      "primary_agent": "backend-architect",
      "secondary_agents": ["typescript-pro"],
      "triggers": ["Edit", "Write"],
      "context": {
        "ai_provider": "Anthropic Claude",
        "orchestration": "Sequential execution"
      }
    },
    {
      "name": "API Contracts",
      "pattern": "src/lib/api/contracts.ts",
      "primary_agent": "typescript-pro",
      "secondary_agents": ["backend-architect", "code-reviewer-pro"],
      "triggers": ["Edit", "Write"],
      "context": {
        "validation": "Zod schemas",
        "importance": "critical",
        "breaking_changes": "require major version bump"
      }
    },
    {
      "name": "Test Files",
      "pattern": "**/*.{test,spec}.{ts,tsx}",
      "primary_agent": "test-suite-manager",
      "secondary_agents": ["test-engineer", "code-reviewer-pro"],
      "triggers": ["Edit", "Write"],
      "context": {
        "test_framework": "Vitest/Jest",
        "e2e_framework": "Chrome DevTools MCP",
        "orchestrator": "test-suite-manager coordinates all testing activities"
      }
    },
    {
      "name": "CI/CD Workflows & Deployment",
      "pattern": ".github/workflows/**/*.yml",
      "primary_agent": "devops-specialist",
      "secondary_agents": ["test-suite-manager", "code-reviewer-pro"],
      "triggers": ["Edit", "Write"],
      "context": {
        "ci_platform": "GitHub Actions",
        "containers": "Docker (PostgreSQL, Redis)",
        "coverage": "Codecov",
        "runtime_target": "<10 minutes"
      }
    },
    {
      "name": "Docker Configuration",
      "pattern": "docker-compose*.yml",
      "primary_agent": "devops-specialist",
      "secondary_agents": ["backend-architect"],
      "triggers": ["Edit", "Write"],
      "context": {
        "services": "PostgreSQL (5433), Redis (6379)",
        "environment": "test, staging, production"
      }
    },
    {
      "name": "Zustand Stores",
      "pattern": "src/stores/**/*.ts",
      "primary_agent": "frontend-developer",
      "secondary_agents": ["typescript-pro", "code-reviewer-pro"],
      "triggers": ["Edit", "Write"],
      "context": {
        "state_management": "Zustand",
        "patterns": "selectors, devtools middleware"
      }
    },
    {
      "name": "Supabase Migrations",
      "pattern": "supabase/migrations/**/*.sql",
      "primary_agent": "backend-architect",
      "secondary_agents": ["code-reviewer-pro"],
      "triggers": ["Edit", "Write"],
      "context": {
        "database": "PostgreSQL",
        "concerns": ["RLS policies", "indexes", "data integrity"]
      }
    },
    {
      "name": "Configuration Files",
      "pattern": "{tsconfig,vite.config,playwright.config,vitest.config}.{json,ts}",
      "primary_agent": "typescript-pro",
      "secondary_agents": ["code-reviewer-pro"],
      "triggers": ["Edit", "Write"],
      "context": {
        "impact": "affects entire build/test pipeline"
      }
    },
    {
      "name": "Documentation",
      "pattern": "**/*.md",
      "exclude": ["node_modules/**"],
      "primary_agent": "code-reviewer-pro",
      "secondary_agents": [],
      "triggers": ["Edit", "Write"],
      "context": {
        "auto_approve": true,
        "focus": "accuracy and clarity"
      }
    }
  ],
  "agent_capabilities": {
    "oauth-integration-specialist": {
      "description": "OAuth 2.0 security and integration expert",
      "strengths": [
        "OAuth 2.0 flows (authorization code, PKCE)",
        "Token management (refresh, revocation, expiry)",
        "Mock OAuth servers for testing",
        "Security validation (PKCE, state, scopes)",
        "Multi-tenant OAuth isolation",
        "Platform integrations (Slack, Google, Microsoft)"
      ],
      "use_for": [
        "OAuth implementation",
        "OAuth security audits",
        "Mock OAuth servers",
        "Token refresh logic",
        "Credential storage",
        "OAuth testing",
        "Scope validation"
      ],
      "mcp_servers": [],
      "special_requirements": [
        "100% test coverage for OAuth code",
        "PKCE mandatory",
        "Singleton storage pattern",
        "No hardcoded credentials"
      ]
    },
    "code-reviewer-pro": {
      "description": "Comprehensive code quality review",
      "strengths": ["security", "best practices", "maintainability"],
      "use_for": ["all code changes", "final approval"],
      "mcp_servers": []
    },
    "test-suite-manager": {
      "description": "Comprehensive test suite orchestration across all layers",
      "strengths": [
        "test strategy design",
        "test architecture patterns",
        "coverage management (80% overall, 100% security)",
        "test performance optimization",
        "test debugging and flakiness resolution",
        "test data management (fixtures, mocks, generators)",
        "CI/CD test pipeline integration",
        "coordination with test-engineer and qa-expert"
      ],
      "use_for": [
        "comprehensive test planning",
        "test suite orchestration",
        "test coverage analysis",
        "test failure debugging",
        "test performance optimization",
        "test architecture design",
        "quality gate enforcement"
      ],
      "mcp_servers": [],
      "special_requirements": [
        "80%+ overall test coverage",
        "100% coverage for security/OAuth code",
        "Test Pyramid adherence (70% unit, 20% integration, 10% E2E)",
        "TDD workflow enforcement",
        "Coordinate with test-engineer for test code generation",
        "Coordinate with qa-expert for E2E browser testing"
      ]
    },
    "test-engineer": {
      "description": "Test code generation and strategy (plugin:testing-suite)",
      "plugin": "testing-suite@claude-code-templates",
      "strengths": ["unit tests", "integration tests", "test strategy", "CI/CD"],
      "use_for": ["test code generation", "test coverage", "test files"],
      "mcp_servers": []
    },
    "qa-expert": {
      "description": "E2E testing and browser automation",
      "strengths": ["user flows", "visual testing", "browser automation"],
      "use_for": ["pre-deployment", "critical features", "UI changes"],
      "mcp_servers": ["chrome-devtools"]
    },
    "typescript-pro": {
      "description": "TypeScript expertise",
      "strengths": ["type safety", "generics", "advanced patterns"],
      "use_for": ["type errors", "API contracts", "complex types"],
      "mcp_servers": []
    },
    "frontend-developer": {
      "description": "React and UI development with Magic UI library",
      "strengths": ["components", "hooks", "state management", "UI animations", "visual effects"],
      "use_for": ["UI components", "React patterns", "Zustand stores", "Magic UI components", "animations", "visual effects"],
      "mcp_servers": ["@magicuidesign/mcp"]
    },
    "backend-architect": {
      "description": "Backend architecture and API design",
      "strengths": ["Express routes", "database design", "API contracts"],
      "use_for": ["API handlers", "database migrations", "backend logic"],
      "mcp_servers": ["supabase"]
    },
    "devops-specialist": {
      "description": "CI/CD pipeline setup, container orchestration, and deployment automation",
      "strengths": [
        "GitHub Actions workflows",
        "Docker and container orchestration (PostgreSQL, Redis)",
        "Test parallelization and optimization (<10 min runtime)",
        "Codecov integration and coverage reporting",
        "Performance regression detection",
        "Automated alerting (Slack webhooks)",
        "Artifact management (reports, screenshots)",
        "Flakiness detection and retry logic",
        "Pipeline debugging and troubleshooting"
      ],
      "use_for": [
        "CI/CD workflows",
        "GitHub Actions setup",
        "Docker configurations",
        "service containers (PostgreSQL, Redis)",
        "test parallelization",
        "coverage integration (Codecov)",
        "performance regression detection",
        "automated alerts",
        "deployment automation",
        "pipeline optimization"
      ],
      "mcp_servers": [],
      "special_requirements": [
        "<10 minute CI/CD runtime target",
        "Parallel test execution (unit, integration, E2E)",
        "Service container health checks",
        "Performance regression threshold: <10%",
        "Flakiness detection with 3x retry",
        "Codecov PR comments enabled",
        "Slack webhook notifications for failures"
      ]
    },
    "debugger": {
      "description": "Debugging and issue resolution",
      "strengths": ["root cause analysis", "test failures", "error handling"],
      "use_for": ["test failures", "bugs", "unexpected behavior"],
      "mcp_servers": []
    },
    "documentation-expert": {
      "description": "Library documentation and API references",
      "strengths": ["docs lookup", "code examples", "framework guides"],
      "use_for": ["library docs", "API references", "how-to guides"],
      "mcp_servers": ["Context7"]
    },
    "database-optimizer": {
      "description": "Database performance optimization",
      "strengths": ["query optimization", "indexing", "performance tuning"],
      "use_for": ["slow queries", "database performance", "query plans"],
      "mcp_servers": ["supabase"]
    },
    "general-purpose": {
      "description": "General-purpose agent with web scraping",
      "strengths": ["web scraping", "research", "fallback handler"],
      "use_for": ["web content extraction", "unknown MCP tasks"],
      "mcp_servers": ["firecrawl-mcp", "Context7"]
    },
    "product-manager": {
      "description": "Task and project management",
      "strengths": ["planning", "task coordination", "roadmaps"],
      "use_for": ["ClickUp tasks", "project planning", "sprints"],
      "mcp_servers": ["clickup"]
    },
    "data-engineer": {
      "description": "Data pipelines and ETL operations",
      "strengths": ["ETL", "data transformation", "pipelines"],
      "use_for": ["data migration", "batch processing", "data quality"],
      "mcp_servers": ["supabase"]
    },
    "git-flow-manager": {
      "description": "Git Flow workflow automation (plugin:git-workflow)",
      "plugin": "git-workflow@claude-code-templates",
      "strengths": ["feature branches", "releases", "hotfixes", "git automation"],
      "use_for": ["git flow operations", "branch management", "release workflow"],
      "mcp_servers": []
    },
    "data-scientist": {
      "description": "Data analysis and modeling (plugin:supabase-toolkit)",
      "plugin": "supabase-toolkit@claude-code-templates",
      "strengths": ["data analysis", "statistical modeling", "Supabase queries"],
      "use_for": ["data exploration", "analytics", "query optimization"],
      "mcp_servers": ["supabase"]
    },
    "fullstack-developer": {
      "description": "Full-stack Next.js specialist (plugin:nextjs-vercel-pro)",
      "plugin": "nextjs-vercel-pro@claude-code-templates",
      "strengths": ["Next.js", "React", "Vercel deployment", "full-stack"],
      "use_for": ["Next.js apps", "Vercel deployments", "SSR/SSG"],
      "mcp_servers": []
    },
    "security-auditor": {
      "description": "Security auditing and vulnerability assessment (plugin:security-pro)",
      "plugin": "security-pro@claude-code-templates",
      "strengths": ["security audits", "penetration testing", "OWASP compliance"],
      "use_for": ["security reviews", "vulnerability scans", "compliance checks"],
      "mcp_servers": []
    },
    "performance-engineer": {
      "description": "Performance optimization specialist (plugin:performance-optimizer)",
      "plugin": "performance-optimizer@claude-code-templates",
      "strengths": ["performance profiling", "bundle optimization", "load testing"],
      "use_for": ["performance audits", "bottleneck analysis", "optimization"],
      "mcp_servers": []
    }
  },
  "execution_strategy": {
    "sequential": {
      "description": "Execute agents one at a time (default)",
      "max_concurrent": 1,
      "use_when": "tasks have dependencies",
      "examples": [
        "Migration → Code → Tests (schema must exist before code)",
        "Refactor → Review → Deploy (changes must be complete before review)",
        "Breaking API change → Update clients → Tests (contract change propagates)"
      ]
    },
    "parallel": {
      "description": "Execute independent agents simultaneously",
      "max_concurrent": 3,
      "use_when": "tasks are independent",
      "examples": [
        "Code generation + Code review + Type checking (all operate on same input)",
        "Frontend UI + Backend API + Tests (independent work streams)",
        "Documentation + Test suite + Performance audit (non-blocking validations)"
      ],
      "common_patterns": [
        {
          "name": "Code + Validation",
          "agents": ["frontend-developer", "code-reviewer-pro", "typescript-pro"],
          "description": "Generate code and validate in parallel",
          "task_call_example": "Single message with 3 Task calls"
        },
        {
          "name": "Full Stack Feature",
          "agents": ["backend-architect", "frontend-developer", "test-suite-manager"],
          "description": "Build backend API, frontend UI, and tests concurrently",
          "task_call_example": "Single message with 3 Task calls"
        },
        {
          "name": "Quality Assurance",
          "agents": ["code-reviewer-pro", "test-suite-manager", "qa-expert"],
          "description": "Comprehensive quality checks in parallel",
          "task_call_example": "Single message with 3 Task calls"
        }
      ]
    }
  },
  "quality_gates": {
    "pre_commit": {
      "required_agents": ["code-reviewer-pro"],
      "optional_agents": ["typescript-pro", "test-suite-manager"],
      "blocking": true,
      "min_score": 80
    },
    "pre_deployment": {
      "required_agents": ["qa-expert", "code-reviewer-pro", "test-suite-manager"],
      "optional_agents": ["security-auditor"],
      "blocking": true,
      "min_score": 85
    }
  },
  "mcp_routing_rules": {
    "description": "Routes tasks requiring MCP servers to specialized agents (main orchestrator has NO MCP access)",
    "main_orchestrator_policy": "NEVER use MCP tools directly - ALWAYS delegate to specialized agents",
    "context_savings": "~92k tokens (74% reduction) by removing MCP from main agent",
    "routing_map": [
      {
        "name": "OAuth Integration & Security",
        "mcp_server": "none",
        "primary_agent": "oauth-integration-specialist",
        "secondary_agents": ["security-auditor", "test-suite-manager"],
        "keywords": [
          "OAuth",
          "OAuth2",
          "OAuth 2.0",
          "PKCE",
          "authorization code",
          "access token",
          "refresh token",
          "token revocation",
          "token expiry",
          "state parameter",
          "OAuth scopes",
          "client credentials",
          "OAuth callback",
          "token exchange",
          "token refresh",
          "OAuth security",
          "OAuth testing",
          "mock OAuth server",
          "Slack OAuth",
          "Google OAuth",
          "Microsoft OAuth",
          "credential storage",
          "OAuth credentials"
        ],
        "file_patterns": [
          "src/**/*oauth*.ts",
          "src/services/*-oauth-service.ts",
          "src/services/oauth-credential-storage-service.ts",
          "tests/mocks/oauth-servers/**/*.ts"
        ],
        "example_queries": [
          "Implement OAuth flow for Slack",
          "Create mock OAuth server for Google",
          "Debug token refresh failure",
          "Validate OAuth scopes for Microsoft",
          "Add PKCE to OAuth implementation",
          "Test OAuth integration with real API",
          "Secure OAuth credential storage"
        ],
        "special_instructions": [
          "100% test coverage required for OAuth code",
          "PKCE is mandatory for all flows",
          "Use singleton pattern for credential storage",
          "Validate scopes before implementation",
          "Follow patterns in .claude/PITFALLS.md (#2, #3, #5)"
        ]
      },
      {
        "name": "Test Suite Orchestration",
        "mcp_server": "none",
        "primary_agent": "test-suite-manager",
        "secondary_agents": ["test-engineer", "qa-expert"],
        "keywords": [
          "test suite",
          "test coverage",
          "test strategy",
          "test architecture",
          "test failures",
          "flaky tests",
          "test performance",
          "test debugging",
          "test fixtures",
          "mock data",
          "test pyramid",
          "unit tests",
          "integration tests",
          "E2E tests",
          "security tests",
          "test orchestration",
          "CI/CD testing",
          "coverage report",
          "test quality"
        ],
        "file_patterns": [
          "**/*.test.ts",
          "**/*.spec.ts",
          "**/*.test.tsx",
          "**/*.spec.tsx",
          "tests/**/*",
          "jest.config.js",
          "vitest.config.ts"
        ],
        "example_queries": [
          "Create comprehensive test suite for OAuth service",
          "Debug failing integration tests",
          "Improve test coverage to 80%",
          "Optimize test execution time",
          "Fix flaky E2E tests",
          "Design test strategy for new feature",
          "Create mock data generators for stress testing"
        ],
        "special_instructions": [
          "80%+ overall test coverage required",
          "100% coverage for security/OAuth code",
          "Follow Test Pyramid (70% unit, 20% integration, 10% E2E)",
          "TDD workflow: Types → Tests → Implementation",
          "Coordinate with test-engineer for test code generation",
          "Coordinate with qa-expert for browser E2E testing"
        ]
      },
      {
        "name": "CI/CD & DevOps",
        "mcp_server": "none",
        "primary_agent": "devops-specialist",
        "secondary_agents": ["test-suite-manager", "backend-architect"],
        "keywords": [
          "CI/CD",
          "GitHub Actions",
          "workflows",
          "Docker",
          "docker-compose",
          "containers",
          "PostgreSQL setup",
          "Redis setup",
          "Codecov",
          "coverage reporting",
          "performance regression",
          "benchmarking",
          "test parallelization",
          "optimization",
          "artifacts",
          "deployment",
          "Slack webhooks",
          "alerting",
          "flakiness detection",
          "pipeline optimization",
          "service containers",
          "health checks"
        ],
        "file_patterns": [
          ".github/workflows/**/*.yml",
          "docker-compose*.yml",
          "Dockerfile",
          ".codecov.yml",
          "scripts/ci-*.sh"
        ],
        "example_queries": [
          "Create GitHub Actions workflow for testing",
          "Set up PostgreSQL and Redis service containers",
          "Configure parallel test execution in CI",
          "Integrate Codecov for coverage reporting",
          "Add performance regression detection",
          "Set up Slack alerts for test failures",
          "Optimize CI/CD runtime to <10 minutes",
          "Debug Docker service container issues",
          "Configure test artifact uploads"
        ],
        "special_instructions": [
          "<10 minute CI/CD runtime target",
          "Parallel job execution (unit, integration, E2E)",
          "Service container health checks mandatory",
          "Performance regression threshold: <10%",
          "Flakiness detection with 3x retry",
          "Codecov PR comments required",
          "Slack webhook for failure notifications"
        ]
      },
      {
        "name": "Library Documentation Lookup",
        "mcp_server": "Context7",
        "primary_agent": "documentation-expert",
        "fallback_agent": "general-purpose",
        "keywords": [
          "library docs",
          "API reference",
          "how to use",
          "package documentation",
          "framework guide",
          "code examples"
        ],
        "example_queries": [
          "How do I use React useEffect?",
          "Show Supabase RLS policy syntax",
          "Find TypeScript utility types documentation"
        ]
      },
      {
        "name": "Browser Automation & E2E Testing",
        "mcp_server": "chrome-devtools",
        "primary_agent": "qa-expert",
        "secondary_agents": ["test-suite-manager"],
        "keywords": [
          "E2E test",
          "browser test",
          "Chrome DevTools",
          "visual test",
          "screenshot",
          "performance trace",
          "browser automation"
        ],
        "example_queries": [
          "Run E2E tests for login flow",
          "Take screenshot of dashboard",
          "Profile page performance",
          "Test cross-browser compatibility"
        ],
        "special_instructions": "Always use --isolated flag for chrome-devtools"
      },
      {
        "name": "Test Code Generation",
        "mcp_server": "none",
        "primary_agent": "test-engineer",
        "plugin": "testing-suite@claude-code-templates",
        "secondary_agents": ["test-suite-manager"],
        "keywords": [
          "test code",
          "unit test",
          "integration test",
          "test coverage",
          "test strategy",
          "generate tests"
        ],
        "example_queries": [
          "Generate unit tests for user service",
          "Create integration tests for API endpoints",
          "Improve test coverage for components"
        ]
      },
      {
        "name": "Database Operations & Migrations",
        "mcp_server": "supabase",
        "primary_agent": "backend-architect",
        "secondary_agents": ["database-optimizer", "data-engineer"],
        "keywords": [
          "database",
          "migration",
          "supabase",
          "schema",
          "RPC function",
          "RLS policy",
          "SQL query"
        ],
        "example_queries": [
          "Create migration for user_preferences table",
          "Add RLS policy for tenants",
          "Create RPC function for campaign stats"
        ],
        "special_instructions": "Migrations go in supabase/migrations/ with YYYYMMDD prefix"
      },
      {
        "name": "Query Optimization & Performance",
        "mcp_server": "supabase",
        "primary_agent": "database-optimizer",
        "keywords": [
          "optimize query",
          "slow query",
          "database performance",
          "index",
          "query plan",
          "performance tuning"
        ],
        "example_queries": [
          "Optimize slow campaign listing query",
          "Add index for user lookups",
          "Analyze query performance"
        ]
      },
      {
        "name": "Data Pipelines & ETL",
        "mcp_server": "supabase",
        "primary_agent": "data-engineer",
        "keywords": [
          "data pipeline",
          "ETL",
          "data transformation",
          "batch process",
          "data migration",
          "data quality"
        ],
        "example_queries": [
          "Create ETL pipeline for ad metrics",
          "Migrate legacy campaign data",
          "Transform CSV to database format"
        ]
      },
      {
        "name": "Web Scraping & Research",
        "mcp_server": "firecrawl-mcp",
        "primary_agent": "general-purpose",
        "keywords": [
          "scrape",
          "crawl",
          "extract from web",
          "fetch URL",
          "web content",
          "research"
        ],
        "example_queries": [
          "Scrape competitor ad examples",
          "Extract product data from website",
          "Research Meta ad best practices"
        ]
      },
      {
        "name": "Task & Project Management",
        "mcp_server": "clickup",
        "primary_agent": "product-manager",
        "keywords": [
          "clickup",
          "create task",
          "project plan",
          "roadmap",
          "sprint planning",
          "milestone tracking"
        ],
        "example_queries": [
          "Create tasks for Q2 roadmap",
          "Plan sprint backlog",
          "Track feature implementation progress"
        ]
      },
      {
        "name": "UI/UX Component Library & Visual Effects",
        "mcp_server": "@magicuidesign/mcp",
        "primary_agent": "frontend-developer",
        "secondary_agents": ["react-pro"],
        "keywords": [
          "UI component",
          "animation",
          "visual effect",
          "layout",
          "background pattern",
          "text effect",
          "button style",
          "marquee",
          "blur fade",
          "grid background",
          "dock",
          "terminal",
          "widget",
          "motion",
          "Magic UI"
        ],
        "example_queries": [
          "Add a marquee of logos",
          "Create blur fade text animation",
          "Add grid background pattern",
          "Implement dock navigation",
          "Add terminal widget component",
          "Create interactive button effects"
        ],
        "special_instructions": "Use frontend-developer for general UI/UX work, react-pro for React-specific patterns"
      }
    ],
    "delegation_workflow": {
      "step_1": "Main agent analyzes user request",
      "step_2": "Main agent matches keywords to MCP routing rules",
      "step_3": "Main agent delegates to primary_agent using Task tool",
      "step_4": "Specialized agent loads MCP servers (only when invoked)",
      "step_5": "Specialized agent executes task and returns concise summary",
      "step_6": "Main agent formats and returns result to user"
    },
    "anti_patterns": [
      "❌ Main agent calling MCP tools directly (main has NO MCP access)",
      "❌ Loading all MCP servers 'just in case' (defeats context optimization)",
      "❌ Returning full MCP responses to main agent (bloats context)",
      "❌ Skipping delegation for 'simple' MCP tasks (breaks isolation)"
    ],
    "best_practices": [
      "✅ Always delegate MCP operations to specialized agents",
      "✅ Use keyword matching for automatic routing",
      "✅ Return summaries with file:line references, not full content",
      "✅ Run browser automation with --isolated flag",
      "✅ Use parallel delegation for independent MCP tasks"
    ]
  }
}
