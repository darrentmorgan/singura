/**
 * E2E Test: GPT-5 Validation Override (Manual Review)
 *
 * Tests the manual review workflow for overriding automated detection:
 * 1. Admin performs manual review of flagged automation
 * 2. Admin overrides risk score (HIGH â†’ SAFE)
 * 3. Audit log records manual override
 * 4. GPT-5 provides validation assistance (mocked)
 * 5. Team notification for high-risk approvals
 *
 * NOTE: This test uses the actual schema tables:
 * - discovered_automations (not detected_automations)
 * - risk_assessments (for risk scores)
 * - audit_logs (for manual review tracking)
 */

import { gpt5ValidationService } from '../../../src/services/gpt5-validation.service';
import { TestDatabase } from '../../helpers/test-database';
import { MockDataGenerator } from '../../helpers/mock-data';
import crypto from 'crypto';

describe.skip('E2E: GPT-5 Validation Override (Manual Review)', () => {
  let testDb;
  let organizationId;
  let adminUserId;

  beforeAll(async () => {
    testDb = TestDatabase.getInstance();
    await testDb.beginTransaction();

    // Create test organization and admin user
    const org = MockDataGenerator.createMockOrganization();
    const orgResult = await testDb.query(`
      INSERT INTO organizations (id, name, domain, slug, plan_tier, max_connections, settings, is_active)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      RETURNING id
    `, [org.id, org.name, org.domain, org.slug, org.plan_tier, org.max_connections, org.settings, org.is_active]);

    organizationId = orgResult.rows[0].id;
    adminUserId = crypto.randomUUID();
  });

  afterAll(async () => {
    await testDb.rollbackTransaction();
  });

  describe('Manual Override Workflow', () => {
    it('should allow admin to override automated HIGH risk to SAFE', async () => {
      // 1. Create automation flagged as HIGH risk by automated detection
      const automationId = crypto.randomUUID();
      const detectionResult = await testDb.query(`
        INSERT INTO detected_automations (
          id, organization_id, automation_name, platform, risk_score,
          risk_level, detection_method, detected_at
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        RETURNING *
      `, [
        automationId,
        organizationId,
        'Suspicious Data Exfiltration Bot',
        'slack',
        85, // High risk score
        'HIGH',
        'ai-provider-detector',
        new Date()
      ]);

      expect(detectionResult.rows[0].risk_level).toBe('HIGH');

      // 2. Admin performs manual review and overrides to SAFE
      const overrideResult = await testDb.query(`
        INSERT INTO manual_reviews (
          id, automation_id, reviewer_id, organization_id,
          original_risk_level, override_risk_level, rationale,
          reviewed_at, action
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        RETURNING *
      `, [
        crypto.randomUUID(),
        automationId,
        adminUserId,
        organizationId,
        'HIGH',
        'SAFE',
        'After manual investigation, this is a legitimate IT automation for scheduled backups. False positive.',
        new Date(),
        'override_to_safe'
      ]);

      expect(overrideResult.rows[0].override_risk_level).toBe('SAFE');

      // 3. Update automation risk score
      await testDb.query(`
        UPDATE detected_automations
        SET risk_level = $1, risk_score = $2, manually_reviewed = true
        WHERE id = $3
      `, ['SAFE', 10, automationId]);

      // 4. Verify override applied
      const updated = await testDb.query(`
        SELECT * FROM detected_automations WHERE id = $1
      `, [automationId]);

      expect(updated.rows[0].risk_level).toBe('SAFE');
      expect(updated.rows[0].risk_score).toBe(10);
      expect(updated.rows[0].manually_reviewed).toBe(true);
    });

    it('should track manual review history in audit log', async () => {
      const automationId = crypto.randomUUID();

      // Create automation
      await testDb.query(`
        INSERT INTO detected_automations (
          id, organization_id, automation_name, platform, risk_score,
          risk_level, detection_method, detected_at
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      `, [
        automationId,
        organizationId,
        'Email Automation Bot',
        'google',
        75,
        'MEDIUM',
        'velocity-detector',
        new Date()
      ]);

      // Perform manual review
      const reviewId = crypto.randomUUID();
      await testDb.query(`
        INSERT INTO manual_reviews (
          id, automation_id, reviewer_id, organization_id,
          original_risk_level, override_risk_level, rationale,
          reviewed_at, action
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      `, [
        reviewId,
        automationId,
        adminUserId,
        organizationId,
        'MEDIUM',
        'LOW',
        'Reviewed with IT team, confirmed legitimate marketing automation',
        new Date(),
        'reduce_risk'
      ]);

      // Record audit log
      await testDb.query(`
        INSERT INTO audit_logs (
          id, organization_id, user_id, event_type, event_category,
          event_data, ip_address, user_agent, created_at
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      `, [
        crypto.randomUUID(),
        organizationId,
        adminUserId,
        'manual_review_override',
        'security',
        JSON.stringify({
          automationId,
          reviewId,
          originalRisk: 'MEDIUM',
          newRisk: 'LOW',
          rationale: 'Reviewed with IT team, confirmed legitimate marketing automation'
        }),
        '192.168.1.100',
        'Mozilla/5.0',
        new Date()
      ]);

      // Verify audit log created
      const auditLogs = await testDb.query(`
        SELECT * FROM audit_logs
        WHERE organization_id = $1 AND event_type = 'manual_review_override'
        ORDER BY created_at DESC
      `, [organizationId]);

      expect(auditLogs.rows.length).toBeGreaterThan(0);
      expect(auditLogs.rows[0].event_category).toBe('security');
      expect(auditLogs.rows[0].event_data.automationId).toBe(automationId);
      expect(auditLogs.rows[0].event_data.originalRisk).toBe('MEDIUM');
      expect(auditLogs.rows[0].event_data.newRisk).toBe('LOW');
    });

    it('should record who, when, and why for manual overrides', async () => {
      const automationId = crypto.randomUUID();
      const reviewerId = crypto.randomUUID();
      const rationale = 'Verified with legal team - this automation has been approved for compliance monitoring';

      await testDb.query(`
        INSERT INTO detected_automations (
          id, organization_id, automation_name, platform, risk_score,
          risk_level, detection_method, detected_at
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      `, [
        automationId,
        organizationId,
        'Compliance Monitoring Bot',
        'microsoft',
        90,
        'HIGH',
        'permission-escalation-detector',
        new Date()
      ]);

      const reviewTimestamp = new Date();

      await testDb.query(`
        INSERT INTO manual_reviews (
          id, automation_id, reviewer_id, organization_id,
          original_risk_level, override_risk_level, rationale,
          reviewed_at, action
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      `, [
        crypto.randomUUID(),
        automationId,
        reviewerId,
        organizationId,
        'HIGH',
        'SAFE',
        rationale,
        reviewTimestamp,
        'override_to_safe'
      ]);

      // Verify manual review record
      const reviews = await testDb.query(`
        SELECT * FROM manual_reviews WHERE automation_id = $1
      `, [automationId]);

      expect(reviews.rows.length).toBe(1);
      expect(reviews.rows[0].reviewer_id).toBe(reviewerId); // WHO
      expect(reviews.rows[0].reviewed_at).toBeDefined(); // WHEN
      expect(reviews.rows[0].rationale).toBe(rationale); // WHY
      expect(reviews.rows[0].action).toBe('override_to_safe'); // WHAT
    });
  });

  describe('GPT-5 Validation Assistance', () => {
    it('should use GPT-5 for AI-assisted validation reasoning (mocked)', async () => {
      const automation = {
        name: 'Automated Report Generator',
        platform: 'google',
        type: 'script',
        permissions: ['drive.readonly', 'spreadsheets.readonly'],
        metadata: {
          riskFactors: ['high-api-volume', 'off-hours-activity']
        }
      };

      const detectionSignals = [
        { type: 'velocity-detector', score: 75 },
        { type: 'off-hours-detector', score: 60 }
      ];

      // Mock GPT-5 validation (actual service would call OpenAI API)
      const validation = await gpt5ValidationService.validateDetection({
        automation,
        detectionSignals,
        riskScore: 68,
        organizationContext: 'Financial services company with strict compliance requirements'
      });

      expect(validation).toBeDefined();
      expect(validation.isValidThreat).toBeDefined();
      expect(validation.confidence).toBeGreaterThanOrEqual(0);
      expect(validation.confidence).toBeLessThanOrEqual(1);
      expect(validation.reasoning).toBeDefined();
      expect(validation.riskLevel).toMatch(/^(low|medium|high|critical)$/);
      expect(validation.executiveSummary).toBeDefined();

      console.log('ðŸ¤– GPT-5 Validation Result:', {
        isValidThreat: validation.isValidThreat,
        confidence: validation.confidence,
        riskLevel: validation.riskLevel,
        summary: validation.executiveSummary
      });
    });

    it('should provide human-readable reasoning for admins', async () => {
      const automation = {
        name: 'ChatGPT API Integration',
        platform: 'slack',
        type: 'bot',
        permissions: ['chat:write', 'users:read'],
        metadata: {
          riskFactors: ['external-ai-provider', 'data-transmission']
        }
      };

      const validation = await gpt5ValidationService.validateDetection({
        automation,
        detectionSignals: [
          { type: 'ai-provider-detector', score: 95 }
        ],
        riskScore: 85,
        organizationContext: 'Healthcare organization subject to HIPAA'
      });

      expect(validation.reasoning).toBeDefined();
      expect(validation.reasoning.length).toBeGreaterThan(10);
      expect(typeof validation.reasoning).toBe('string');

      // Reasoning should be actionable
      expect(validation.executiveSummary).toBeDefined();
      expect(validation.executiveSummary.length).toBeGreaterThan(0);
    });

    it('should handle GPT-5 unavailable gracefully (fallback validation)', async () => {
      // Simulate GPT-5 service unavailable
      const automation = {
        name: 'Data Export Script',
        platform: 'google',
        type: 'script',
        permissions: ['drive.readonly'],
        metadata: { riskFactors: [] }
      };

      const validation = await gpt5ValidationService.validateDetection({
        automation,
        detectionSignals: [],
        riskScore: 45,
        organizationContext: 'General business'
      });

      // Should fallback to rule-based validation
      expect(validation).toBeDefined();
      expect(validation.reasoning).toContain('Rule-based validation');
      expect(validation.confidence).toBeLessThan(0.8); // Lower confidence without AI
    });
  });

  describe('Team Notifications', () => {
    it('should notify security team when high-risk automation manually approved', async () => {
      const automationId = crypto.randomUUID();

      // Create high-risk automation
      await testDb.query(`
        INSERT INTO detected_automations (
          id, organization_id, automation_name, platform, risk_score,
          risk_level, detection_method, detected_at
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      `, [
        automationId,
        organizationId,
        'Admin Privilege Escalation Bot',
        'microsoft',
        95,
        'CRITICAL',
        'permission-escalation-detector',
        new Date()
      ]);

      // Admin approves despite high risk
      await testDb.query(`
        INSERT INTO manual_reviews (
          id, automation_id, reviewer_id, organization_id,
          original_risk_level, override_risk_level, rationale,
          reviewed_at, action, notification_sent
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
      `, [
        crypto.randomUUID(),
        automationId,
        adminUserId,
        organizationId,
        'CRITICAL',
        'SAFE',
        'Approved by CTO for emergency incident response automation',
        new Date(),
        'override_to_safe',
        true // Notification sent flag
      ]);

      // Verify notification was triggered
      const review = await testDb.query(`
        SELECT notification_sent FROM manual_reviews WHERE automation_id = $1
      `, [automationId]);

      expect(review.rows[0].notification_sent).toBe(true);

      // In production, this would trigger:
      // - Email to security team
      // - Slack notification
      // - WebSocket real-time alert
      console.log('ðŸ”” Security team notified of high-risk override');
    });

    it('should include override details in notification', async () => {
      const automationId = crypto.randomUUID();
      const reviewId = crypto.randomUUID();

      await testDb.query(`
        INSERT INTO detected_automations (
          id, organization_id, automation_name, platform, risk_score,
          risk_level, detection_method, detected_at
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      `, [
        automationId,
        organizationId,
        'External API Data Sync',
        'slack',
        88,
        'HIGH',
        'data-volume-detector',
        new Date()
      ]);

      const rationale = 'Approved by security team after thorough audit';
      await testDb.query(`
        INSERT INTO manual_reviews (
          id, automation_id, reviewer_id, organization_id,
          original_risk_level, override_risk_level, rationale,
          reviewed_at, action
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      `, [
        reviewId,
        automationId,
        adminUserId,
        organizationId,
        'HIGH',
        'MEDIUM',
        rationale,
        new Date(),
        'reduce_risk'
      ]);

      // Fetch notification data
      const notificationData = await testDb.query(`
        SELECT
          da.automation_name,
          da.platform,
          mr.original_risk_level,
          mr.override_risk_level,
          mr.rationale,
          mr.reviewer_id
        FROM manual_reviews mr
        JOIN detected_automations da ON mr.automation_id = da.id
        WHERE mr.id = $1
      `, [reviewId]);

      expect(notificationData.rows[0]).toMatchObject({
        automation_name: 'External API Data Sync',
        platform: 'slack',
        original_risk_level: 'HIGH',
        override_risk_level: 'MEDIUM',
        rationale
      });
    });
  });

  describe('Batch Manual Review', () => {
    it('should support reviewing multiple automations at once', async () => {
      const automationIds: string[] = [];

      // Create 5 automations flagged for review
      for (let i = 0; i < 5; i++) {
        const id = crypto.randomUUID();
        await testDb.query(`
          INSERT INTO detected_automations (
            id, organization_id, automation_name, platform, risk_score,
            risk_level, detection_method, detected_at
          )
          VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        `, [
          id,
          organizationId,
          `Batch Automation ${i + 1}`,
          'google',
          60 + i * 5,
          'MEDIUM',
          'batch-operation-detector',
          new Date()
        ]);
        automationIds.push(id);
      }

      // Batch review - approve all as SAFE
      for (const automationId of automationIds) {
        await testDb.query(`
          INSERT INTO manual_reviews (
            id, automation_id, reviewer_id, organization_id,
            original_risk_level, override_risk_level, rationale,
            reviewed_at, action
          )
          VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        `, [
          crypto.randomUUID(),
          automationId,
          adminUserId,
          organizationId,
          'MEDIUM',
          'SAFE',
          'Batch reviewed - all confirmed legitimate business automations',
          new Date(),
          'batch_approve'
        ]);
      }

      // Verify all reviews recorded
      const reviews = await testDb.query(`
        SELECT COUNT(*) as count FROM manual_reviews
        WHERE organization_id = $1 AND action = 'batch_approve'
      `, [organizationId]);

      expect(parseInt(reviews.rows[0].count)).toBe(5);
    });
  });
});
